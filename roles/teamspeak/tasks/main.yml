---
- name: Upgrade packages
  package:
    name: '*'
    state: latest
  tags:
    - dependencies

- name: Install dependencies
  package:
    name: '{{ item }}'
    state: present
  loop: '{{ ts_dependecies }}'
  tags:
    - dependencies

- name: 'Create user {{ ts_user }}'
  user:
    name: '{{ ts_user }}'
    group: '{{ ts_group }}'
    state: present
    shell: /bin/false
    create_home: yes
    home: '{{ ts_home }}'
  tags:
    - user

- name: Configure directories
  file:
    path: '{{ ts_home }}/{{ item }}'
    owner: '{{ ts_user }}'
    group: '{{ ts_group }}'
    mode: '0700'
    state: directory
  loop:
    - files
    - logs
    - server
    - backup
  tags:
    - directories

- name: 'Configure {{ ts_service }}.ini file'
  template:
    src: templates/ts3server.ini.j2
    dest: '{{ ts_home }}/{{ ts_service }}.ini'
    mode: '0600'
  notify: 'restart {{ ts_service }}'
  tags:
    - config

- name: 'Configure query_ip'
  template:
    src: 'templates/{{ item }}.txt.j2'
    dest: '{{ ts_home }}/{{ item }}.txt'
    mode: '0600'
  loop:
    - query_ip_whitelist
    - query_ip_blacklist
  notify: 'restart {{ ts_service }}'
  tags:
    - config

- name: 'Create service {{ ts_service }}'
  template:
    src: templates/ts3server.service.j2
    dest: '{{ ts_service_path }}/{{ ts_service }}.service'
    mode: '0644'
  register: systemd
  tags:
    - systemd

- name: Reload systemd
  systemd:
    daemon_reload: yes
  when: systemd.changed
  tags:
    - systemd

- name: Check enabled ports
  firewalld:
    port: '{{ ts_ports[item] }}'
    permanent: true
    state: enabled
  loop: '{{ ts_ports_enabled }}'
  tags:
    - firewall

- name: Create temporary file for donwload repo
  tempfile:
    state: file
  register: download_repo
  tags:
    - update

- name: 'Get index.html from {{ ts_download_repo }}'
  get_url:
    url: '{{ ts_download_repo }}/index.html'
    dest: '{{ download_repo.path }}'
    force: yes
  when: download_repo.path is defined
  tags:
    - update

- name: Determine latest available version
  shell: 'grep -Eo "{{ ts_version_regex }}" {{ download_repo.path }} | sort -uV | tail -n1'
  register: latest_determined
  when: download_repo.path is defined
  tags:
    - update

- name: Remove temporary file for donwload repo
  file:
    path: "{{ download_repo.path }}"
    state: absent
  when: download_repo.path is defined
  tags:
    - update

- name: Check installed version
  stat:
    path: '{{ ts_server_latest }}'
  register: latest_stat
  tags:
    - update

- name: Set latest installed version 
  set_fact:
    latest_installed: '{{ latest_stat.stat.lnk_target | basename }}'
  when: latest_stat.stat.exists is defined and latest_stat.stat.exists == true
  tags:
    - update

- name: Upgrade TeamSpeak 3 server
  block:
    - name: 'Create destination for version {{ latest_determined.stdout }}'
      file:
        path: '{{ ts_server_path }}/{{ latest_determined.stdout }}'
        state: directory
        owner: '{{ ts_user }}'
        group: '{{ ts_group }}'
        mode: '0700'
      when: latest_determined.stdout is defined

    - name: 'Deploy {{ ts_package_name }}-{{ latest_determined.stdout }}.tar.bz2 from {{ ts_download_repo }}/{{ latest_determined.stdout }} to {{ ts_server_path }}/{{ latest_determined.stdout }}'
      unarchive:
        src: '{{ ts_download_repo }}/{{ latest_determined.stdout }}/{{ ts_package_name }}-{{ latest_determined.stdout }}.tar.bz2'
        dest: '{{ ts_server_path }}/{{ latest_determined.stdout }}'
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: latest_determined.stdout is defined

    - name: 'Stop {{ ts_service }} service'
      systemd:
        name: '{{ ts_service }}'
        state: stopped

    - name: 'Set symlink {{ ts_server_latest }} to verion {{ latest_determined.stdout }}'
      file:
        src: '{{ ts_server_path }}/{{ latest_determined.stdout }}'
        dest: '{{ ts_server_latest }}'
        owner: '{{ ts_user }}'
        group: '{{ ts_group }}'
        state: link
        force: yes
      when: latest_determined.stdout is defined

    - name: 'Lookup DB {{ ts_sqlitedb }}'
      stat:
        path: '{{ ts_home }}/{{ ts_sqlitedb }}'
      register: db

    - name: Create DB backup
      copy:
        src: '{{ ts_home }}/{{ ts_sqlitedb }}'
        dest: '{{ ts_home }}/backup/{{ ts_sqlitedb }}'
        remote_src: yes
      when: db.stat.exists is defined and db.stat.exists == true

  when: (latest_stat.stat.exists is defined and latest_stat.stat.exists == false) or (latest_determined.stdout is defined and latest_installed is defined and latest_determined.stdout is version(latest_installed, ">"))
  tags:
    - update

- name: Check ts3server_minimal_runscript.sh
  copy:
    src: '{{ ts_server_latest }}/ts3server_minimal_runscript.sh'
    dest: '{{ ts_home }}/ts3server_minimal_runscript.sh'
    owner: '{{ ts_user }}'
    group: '{{ ts_group }}'
    remote_src: yes
  when: latest_determined.stdout is defined
  tags:
    - update
    - runscript

- name: Get files in latest release
  find:
    paths: '{{ ts_server_latest }}'
    file_type: any
    excludes: 'ts3server_minimal_runscript.sh'
  register: files_in_latest_release
  tags:
    - update

- name: Check symlinks
  file:
    src: '{{ item.path }}'
    dest: '{{ ts_home }}/{{ item.path | basename }}'
    owner: '{{ ts_user }}'
    group: '{{ ts_group }}'
    state: link
    force: yes
  with_items: "{{ files_in_latest_release.files }}"
  notify: 'restart {{ ts_service }}'
  when: files_in_latest_release.files is defined
  tags:
    - update

- name: Check executables
  file:
    path: '{{ item }}'
    mode: '0700'
  loop: '{{ ts_executables }}'
  tags:
    - update
    - runscript

- name: 'Check ownership on {{ ts_home }}'
  file:
    path: '{{ ts_home }}'
    owner: '{{ ts_user }}'
    group: '{{ ts_group }}'
    state: directory
    recurse: yes
  tags:
    - update
    - permissions

- name: 'Start {{ ts_service }} service'
  systemd:
    name: '{{ ts_service }}'
    state: started
  tags:
  - update
  - start

- name: Get admin token after first installation
  block:
    - name: 'Wait until the file {{ ts_home }}/logs/ts3server_1.log is present before continuing'
      wait_for:
        path: '{{ ts_home }}/logs/ts3server_1.log'

    - name: Search Token
      shell: 'grep token {{ ts_home }}/logs/ts3server_1.log | cut -d"=" -f2'
      register: token

    - name: Print token
      debug:
        msg: 'ServerAdmin privilege key --> {{ token.stdout }}'
      when: token.stdout is defined

  when: db.stat.exists is defined and db.stat.exists == false
  tags:
    - token